<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Jeck_Zhang]]></title>
  <subtitle><![CDATA[zxc]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lawrence-zxc.github.io/"/>
  <updated>2014-10-24T09:53:44.029Z</updated>
  <id>http://lawrence-zxc.github.io/</id>
  
  <author>
    <name><![CDATA[Jeck Zhang]]></name>
    <email><![CDATA[xiongcaizhang@yahoo.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[RESTful Web Services中API的设计原则]]></title>
    <link href="http://lawrence-zxc.github.io/2014/10/24/blog2/"/>
    <id>http://lawrence-zxc.github.io/2014/10/24/blog2/</id>
    <published>2014-10-24T09:40:04.000Z</published>
    <updated>2014-10-24T09:45:26.000Z</updated>
    <content type="html"><![CDATA[<p>RESTful既然作为一种软件架构风格，那就自然就会有它本身的设计原则，就像iOS、android以及metroUI都有自己的设计规范一样。遵守基本的设计规则可以帮助我们设计出更加简洁易懂、优雅的软件系统。在这个过程中，程序员们都是艺术家，设计着另外一种美。</p>
<p>关于API的设计原则，我所知道的大部分来自书本、网上的资料以及参考各个开放平台的API规范。</p>
<pre><code><span class="title">RESTful</span> Web Services Cookbook
想要看书的话，可以买本来看，从名字就知道，这是一本手册，里面有设计API需要注意的所有方面。

RESTful API Design
Youtube上apigee关于API Desion的视频，讲的也很不错，请自备梯子。
</code></pre><p>豆瓣的API<br>    另外就是可以参考一下现有的开放平台API的设计，我比较喜欢设计，条理清晰，也很漂亮。apigee的视频中举的例子比较多的是facebook、twitter、LinkedIn等网站，参考已经实现的设计也是一个很好的学习方法。</p>
<p>API Design Tips</p>
<p>每个实体对象仅需要两个URL </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/books     # <span class="keyword">for</span> Collections</div><div class="line">/books/<span class="number">2</span>   # <span class="keyword">for</span> Single Object</div></pre></td></tr></table></figure>

<p>每个对象仅需要两个url，第一个是获取对象的集合，第二个是获取单个对象</p>
<p>使用名词代替动词</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/books/<span class="number">2</span>         # Good :)</div><div class="line">/getBook?id=<span class="number">2</span>    # Bad :(</div></pre></td></tr></table></figure>

<p>正确使用HTTP方法 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET     # Read</div><div class="line">POST    # Create</div><div class="line">PUT     # Update</div><div class="line">DELETE  # Delete</div></pre></td></tr></table></figure>

<p>对象间的关联关系 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/books/<span class="number">2</span>/author  # book author</div><div class="line">/author/<span class="number">1</span>/books  # author<span class="string">'s books</span></div></pre></td></tr></table></figure>

<p>数据分页 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/books?start=<span class="number">10</span>&count=<span class="number">20</span>   # <span class="keyword">return</span> the books from <span class="number">10</span> to <span class="number">30</span></div></pre></td></tr></table></figure>

<p>查询条件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/books?order=hot   # <span class="keyword">return</span> the books order by hot</div></pre></td></tr></table></figure>

<p>返回需要的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/books/<span class="number">2</span>?fields=author,isbn,price   # only <span class="keyword">return</span> the book<span class="string">'s author, isbn and price</span></div></pre></td></tr></table></figure>

<p>错误处理<br>依靠status code来给程序标识错误，常见的status code如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">200</span> - OK             # GET success</div><div class="line"><span class="number">201</span> - CREATED        # POST success</div><div class="line"><span class="number">202</span> - ACCEPTED       # PUT success</div><div class="line"><span class="number">400</span> - BAD REQUEST    # Wrong path or unsupported parameters</div><div class="line"><span class="number">401</span> - UNAUTHORIZED   # Need Authorize</div><div class="line"><span class="number">403</span> - FORBIDDEN      # forbidden to access</div><div class="line"><span class="number">404</span> - NOT FOUND      # Resource not exists</div><div class="line"><span class="number">500</span> - INTERNAL ERROR # Server error</div></pre></td></tr></table></figure>

<p>具体的错误信息和错误代码（自定义的错误代码）也要返回： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">{<span class="string">"code"</span>: <span class="number">1000</span>, <span class="string">"message"</span>: <span class="string">"missing_args"</span>, <span class="string">"request"</span>: <span class="string">"GET /books/2"</span>}</div></pre></td></tr></table></figure>

<p>身份认证 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Oauth <span class="number">2.0</span></div></pre></td></tr></table></figure>

<p>版本管理 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET   /books/<span class="number">2</span>      # version <span class="number">1</span></div><div class="line">GET   /v2/books/<span class="number">2</span>   # version <span class="number">2</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>RESTful既然作为一种软件架构风格，那就自然就会有它本身的设计原则，就像iOS、android以及metroUI都有自己的设计规范一样。遵守基本的设计规则可以帮助我们设计出更加简洁易懂、优雅的软件系统。在这个过程中，程序员们都是艺术家，设计着另外一种美。</p>
<p>]]>
    </summary>
    
      <category term="Java" scheme="http://lawrence-zxc.github.io/tags/Java/"/>
    
      <category term="架构" scheme="http://lawrence-zxc.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="日志" scheme="http://lawrence-zxc.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[琐忆]]></title>
    <link href="http://lawrence-zxc.github.io/2014/10/24/rizhi/"/>
    <id>http://lawrence-zxc.github.io/2014/10/24/rizhi/</id>
    <published>2014-10-24T09:10:34.000Z</published>
    <updated>2014-10-24T09:36:51.000Z</updated>
    <content type="html"><![CDATA[<p>年年如是，<br>年年不同，<br>依稀往事，<br>如梦如风。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>年年如是，<br>年年不同，<br>依稀往事，<br>如梦如风。</p>
]]>
    </summary>
    
      <category term="开始" scheme="http://lawrence-zxc.github.io/tags/%E5%BC%80%E5%A7%8B/"/>
    
      <category term="Mac/Unix" scheme="http://lawrence-zxc.github.io/tags/Mac-Unix/"/>
    
      <category term="Java" scheme="http://lawrence-zxc.github.io/tags/Java/"/>
    
      <category term="Python" scheme="http://lawrence-zxc.github.io/tags/Python/"/>
    
      <category term="JavaScript" scheme="http://lawrence-zxc.github.io/tags/JavaScript/"/>
    
      <category term="Mongodb" scheme="http://lawrence-zxc.github.io/tags/Mongodb/"/>
    
      <category term="Linux" scheme="http://lawrence-zxc.github.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://lawrence-zxc.github.io/tags/Nginx/"/>
    
      <category term="Oracle" scheme="http://lawrence-zxc.github.io/tags/Oracle/"/>
    
      <category term="Mysql" scheme="http://lawrence-zxc.github.io/tags/Mysql/"/>
    
      <category term="前端" scheme="http://lawrence-zxc.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="技术" scheme="http://lawrence-zxc.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="旅行" scheme="http://lawrence-zxc.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="理财" scheme="http://lawrence-zxc.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="生活" scheme="http://lawrence-zxc.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="读书" scheme="http://lawrence-zxc.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="随感" scheme="http://lawrence-zxc.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
      <category term="其他" scheme="http://lawrence-zxc.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="日志" scheme="http://lawrence-zxc.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql多列索引详解]]></title>
    <link href="http://lawrence-zxc.github.io/2014/10/09/blog4/"/>
    <id>http://lawrence-zxc.github.io/2014/10/09/blog4/</id>
    <published>2014-10-09T06:48:10.000Z</published>
    <updated>2014-10-24T09:50:15.000Z</updated>
    <content type="html"><![CDATA[<p>创建多列索引</p>
<p>在t_user表id，userName，email字段上创建多列索引（该表只有此索引）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table t_user add index USER_INDEX(id, userName, email);</div></pre></td></tr></table></figure>

<p>能够利用该索引的查询</p>
<p>符合leftmost index prefixes原则的查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * from t_user where id = <span class="number">40</span>;</div><div class="line">select * from t_user where id between <span class="number">10</span> and <span class="number">50</span>;</div><div class="line">select * from t_user where id <span class="keyword">in</span> (<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>);</div><div class="line">select * from t_user where id = <span class="number">40</span> and userName = <span class="string">'zxc'</span>;</div><div class="line">select * from t_user where id = <span class="number">40</span> and userName = <span class="string">'zxc'</span> and email = <span class="string">'xiongcaizhang@yahoo.com'</span>;</div><div class="line">select * from t_user where id &gt; <span class="number">40</span> and userName &gt; <span class="string">'t'</span>;</div></pre></td></tr></table></figure>

<p>不能利用以上索引的查询</p>
<p>不符合leftmost index prefixes原则的查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select * from t_user where userName = <span class="string">'zxc'</span>;</div><div class="line">select * from t_user where userName = <span class="string">'zxc'</span> and email = <span class="string">'xiongcaizhang@yahoo.com'</span>;</div></pre></td></tr></table></figure>

<p>or查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from t_user where id = <span class="number">40</span> or userName = <span class="string">'zxc'</span>;</div></pre></td></tr></table></figure>

<p>不能使用索引的解决方案</p>
<p>在where语句后面的查询字段建立单个索引及多列索引，注意leftmost index prefixes原则，避免建立重复索引</p>
<p>or查询使用union来连接查询结果，并在对应的字段上建立索引</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>创建多列索引</p>
<p>在t_user表id，userName，email字段上创建多列索引（该表只有此索引）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div cla]]>
    </summary>
    
      <category term="Mysql" scheme="http://lawrence-zxc.github.io/tags/Mysql/"/>
    
      <category term="日志" scheme="http://lawrence-zxc.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nginx+Lua+GraphicsMagick实现动态生成指定尺寸的图片]]></title>
    <link href="http://lawrence-zxc.github.io/2014/09/18/blog3/"/>
    <id>http://lawrence-zxc.github.io/2014/09/18/blog3/</id>
    <published>2014-09-18T07:12:39.000Z</published>
    <updated>2014-10-24T09:48:30.000Z</updated>
    <content type="html"><![CDATA[<p>面临的问题<br>网站需求变更，需要更多不同尺寸的缩略图</p>
<p>有些图片的缩略图很少使用到，但还是存在了硬盘上，造成空间浪费</p>
<p>解决方法<br>Nginx搭配Lua模块，如果访问的图片不存在，则调用GraphicsMagick的命令行实时生成指定尺寸的图片。</p>
<p>-集成了Lua模块的Nginx项目OpenResty</p>
<p>-GraphicsMagick的安装和使用</p>
<p>-具体使用方法</p>
<p>原始图片地址：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/images/f47aa98b47b4b7bd.jpg</div></pre></td></tr></table></figure>

<p>自定义图片尺寸：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/images/f47aa98b47b4b7bd_40x40.jpg</div></pre></td></tr></table></figure>

<p>配置文件中可以写成这样</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">location ~ <span class="string">'/images/([0-9a-z]+)_([0-9]+)x([0-9]+).jpg$'</span> {</div><div class="line">    root /home/images;</div><div class="line">    <span class="keyword">set</span> <span class="variable">$image_root</span> =  <span class="string">'/home/images'</span>;</div><div class="line">    <span class="keyword">set</span> <span class="variable">$fileName</span> = ngx.arg[<span class="number">1</span>];</div><div class="line">    <span class="keyword">set</span> <span class="variable">$width</span> = ngx.arg[<span class="number">2</span>];</div><div class="line">    <span class="keyword">set</span> <span class="variable">$height</span> = ngx.arg[<span class="number">3</span>];</div><div class="line">    <span class="keyword">set</span> <span class="variable">$origin</span> = <span class="variable">$image_root</span>/<span class="variable">$fileName</span>.jpg</div><div class="line">    <span class="keyword">set</span> <span class="variable">$file</span> = <span class="variable">$image_root</span>/<span class="variable">$fileName_</span><span class="variable">$widthx</span><span class="variable">$height</span>.jpg</div><div class="line">    <span class="keyword">if</span> (!<span class="operator">-f</span> <span class="variable">$file</span>) {</div><div class="line">        rewrite_by_lua <span class="string">'</span></div><div class="line">            local command = "gm convert "..ngx.var.origin.." -thumbnail "..ngx.var.width.."x"</div><div class="line">                            ..ngx.var.height.." "..ngx.var.file;</div><div class="line">            os.execute(command);</div><div class="line">         ';</div><div class="line"> }</div></pre></td></tr></table></figure>

<p>这样就能简单的生成图片指定尺寸的缩略图了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>面临的问题<br>网站需求变更，需要更多不同尺寸的缩略图</p>
<p>有些图片的缩略图很少使用到，但还是存在了硬盘上，造成空间浪费</p>
<p>解决方法<br>Nginx搭配Lua模块，如果访问的图片不存在，则调用GraphicsMagick的命令行实时生成指定尺寸的图]]>
    </summary>
    
      <category term="Nginx" scheme="http://lawrence-zxc.github.io/tags/Nginx/"/>
    
      <category term="日志" scheme="http://lawrence-zxc.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[REST风格的软件架构]]></title>
    <link href="http://lawrence-zxc.github.io/2014/09/05/blog1/"/>
    <id>http://lawrence-zxc.github.io/2014/09/05/blog1/</id>
    <published>2014-09-05T06:10:03.000Z</published>
    <updated>2014-10-24T09:43:01.000Z</updated>
    <content type="html"><![CDATA[<p>REST风格的软件架构</p>
<p>作者：侯西阳 时间：June 2, 2013 分类：RESTful<br>REST(REpresentational State Transfer)，表征状态转移，是一种针对分布式架构的软件架构风格，这种软件架构风格已经被广泛的应用在了Web API的设计上面，具有以下几个特点：</p>
<pre><code><span class="title">Resources</span> 一切都是资源
</code></pre><p>分布在整个网络中的内容都是一种资源，并由URI来确定，资源可以是文本、图片、服务等实体的存在，并用URI来提供这种资源，例如， /book/2 可以用来提供id为2的一本书。</p>
<pre><code><span class="title">Representation</span> 表现层
</code></pre><p>资源是一种实体，需要通过一种形式表现出来，这种形式可以是HTML、XML、JSON等文本格式，也可以是图片、音频或视频等多媒体格式，例如，通过访问 /book/2 返回了一下JSON数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">{</div><div class="line">    <span class="string">"title"</span>: <span class="string">"Gone with the Wind"</span>,</div><div class="line">    <span class="string">"author"</span>: <span class="string">"Margaret Mitchell"</span> </div><div class="line">}</div></pre></td></tr></table></figure>

<p>JSON数据就这本书的表现层。</p>
<p>State Transfer 显示的使用HTTP方法来转化资源的状态</p>
<p>使用HTTP规范中的GET、POST、PUT、DELETE方法来操作资源，例如</p>
<pre><code>GET <span class="regexp">/book/</span><span class="number">2</span>
</code></pre><p>可以获得id为2的一本书，HTTP方法与操作资源的对应关系如下</p>
<pre><code>POST 创建或更新资源

GET 获取资源

PUT 更新资源

<span class="keyword">DELETE</span> 删除资源
</code></pre><p>举例如下：<br>同样是访问 /book/2，</p>
<pre><code>POST 创建一本书

GET 获取一本的信息

PUT 更新书的信息

<span class="keyword">DELETE</span> 删除id为<span class="number">2</span>的书

Stateless 无状态
</code></pre><p>服务器端不会保存请求之间的上下文状态。</p>
<pre><code>Client-Server 基于<span class="keyword">C</span>/S结构
</code></pre><p>Client端不关心数据如何存储，Server端也不关心怎样展现数据，因此，Client和Server可以分开部署，适用于iOS与Android等移动客户端与Server端的通信。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>REST风格的软件架构</p>
<p>作者：侯西阳 时间：June 2, 2013 分类：RESTful<br>REST(REpresentational State Transfer)，表征状态转移，是一种针对分布式架构的软件架构风格，这种软件架构风格已经被广泛的应用在了]]>
    </summary>
    
      <category term="Java" scheme="http://lawrence-zxc.github.io/tags/Java/"/>
    
      <category term="架构" scheme="http://lawrence-zxc.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="日志" scheme="http://lawrence-zxc.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java中使HttpDelete可以发送body信息]]></title>
    <link href="http://lawrence-zxc.github.io/2014/07/11/java-http/"/>
    <id>http://lawrence-zxc.github.io/2014/07/11/java-http/</id>
    <published>2014-07-11T02:32:48.000Z</published>
    <updated>2014-10-24T09:35:37.000Z</updated>
    <content type="html"><![CDATA[<p>RESTful api中用到了DELETE方法，android开发的同事遇到了问题，使用HttpDelete执行DELETE操作的时候，不能携带body信息，研究了很久之后找到了解决方法。 我们查看httpclient-4.2.3的源码可以发现，methods包下面包含HttpGet, HttpPost, HttpPut, HttpDelete等类来实现http的常用操作。 其中，HttpPost继承自HttpEntityEnclosingRequestBase，HttpEntityEnclosingRequestBase类又实现了HttpEntityEnclosingRequest接口，实现了setEntity的方法。 而HttpDelete继承自HttpRequestBase，没有实现setEntity的方法，因此无法设置HttpEntity对象。 这样解决方法就明显了，我们可以自己实现一个MyHttpDelete类，继承自HttpEntityEnclosingRequestBase，覆盖其中的getMethod方法，使其返回“DELETE”。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpDelete</span> <span class="keyword">extends</span> <span class="title">HttpEntityEnclosingRequestBase</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_NAME = <span class="string">"DELETE"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String <span class="title">getMethod</span>() {</div><div class="line">        <span class="keyword">return</span> METHOD_NAME;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">MyHttpDelete</span>(<span class="keyword">final</span> String uri) {</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        setURI(URI.create(uri));</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">MyHttpDelete</span>(<span class="keyword">final</span> URI uri) {</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        setURI(uri);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">MyHttpDelete</span>() {</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用delete方法时，直接可以按下面方式操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">DefaultHttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient(); </div><div class="line"></div><div class="line">MyHttpDelete delete = <span class="keyword">new</span> MyHttpDelete(<span class="string">"http://url.com"</span>); </div><div class="line"></div><div class="line">List&lt;NameValuePair&gt; nameValuePairs = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;(); </div><div class="line"></div><div class="line">delete.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(nameValuePairs)); </div><div class="line"></div><div class="line">HttpResponse response = httpClient.execute(delete);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>RESTful api中用到了DELETE方法，android开发的同事遇到了问题，使用HttpDelete执行DELETE操作的时候，不能携带body信息，研究了很久之后找到了解决方法。 我们查看httpclient-4.2.3的源码可以发现，methods包下面包含Ht]]>
    </summary>
    
      <category term="Java" scheme="http://lawrence-zxc.github.io/tags/Java/"/>
    
      <category term="日志" scheme="http://lawrence-zxc.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat关闭时dubbo consumer导致jvm进程无法退出的问题]]></title>
    <link href="http://lawrence-zxc.github.io/2014/06/18/hello/"/>
    <id>http://lawrence-zxc.github.io/2014/06/18/hello/</id>
    <published>2014-06-18T08:15:01.000Z</published>
    <updated>2014-10-24T09:24:31.000Z</updated>
    <content type="html"><![CDATA[<p>在apache-tomcat托管的应用里如果使用了dubbo的消费端，关闭tomcat时，会无法退出进程，应用会被关闭，connector端口也关闭了，但dubbo相关的一些线程仍存在，导致java进程并不会消失。</p>
<p>这其实是由非daemon线程引起的，jvm里当前main线程在退出时，只要存在非daemon的子线程，就不会退出jvm，哪怕这个非daemon的线程是在一个daemon线程里启动的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonTest</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">static</span> class MyThread extends Thread {</div><div class="line">        <span class="keyword">public</span> <span class="title">MyThread</span>(<span class="keyword">boolean</span> isDaemon){</div><div class="line">            <span class="keyword">this</span>.setDaemon(isDaemon);</div><div class="line">        }</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){</div><div class="line">            <span class="keyword">try</span> {</div><div class="line">                Thread.sleep(<span class="number">1000</span>*<span class="number">10000</span>);;</div><div class="line">            } <span class="keyword">catch</span> (Exception e) {</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception{</div><div class="line">        Thread t1 = <span class="keyword">new</span> MyThread(<span class="keyword">true</span>);</div><div class="line">        Thread t2 = <span class="keyword">new</span> MyThread(<span class="keyword">true</span>);</div><div class="line">        Thread t3 = <span class="keyword">new</span> MyThread(<span class="keyword">true</span>);</div><div class="line">        Thread t4 = <span class="keyword">new</span> MyThread(<span class="keyword">true</span>) {</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">                <span class="keyword">try</span> {</div><div class="line">                    <span class="keyword">new</span> MyThread(<span class="keyword">false</span>).start(); <span class="comment">//非daemon</span></div><div class="line">                    Thread.sleep(<span class="number">1000</span> * <span class="number">10000</span>);</div><div class="line">                } <span class="keyword">catch</span> (Exception e) {</div><div class="line">                }</div><div class="line">            }</div><div class="line">        };</div><div class="line"></div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t3.start();</div><div class="line">        t4.start();</div><div class="line"></div><div class="line">        Thread.sleep(<span class="number">2000</span>);</div><div class="line">        System.out.println(<span class="string">"main thread quit"</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>上面启动了4个子线程，都是daemon的，其中有一个子线程又启动了一个非daemon线程，结果主线程退出时，jvm进程并不会退出，并且其他daemon线程也继续运行。</p>
<p>Dubbo的线程都是daemon的，不过它使用的netty框架却有一个非daemon的“Hashed wheel timer”线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Hashed wheel timer #1"</span> #<span class="number">1582</span> prio=<span class="number">5</span> os_prio=<span class="number">0</span> tid=<span class="number">0x00002aaac5054800</span> nid=<span class="number">0x7fd3</span> waiting on condition [<span class="number">0x0000000041262000</span>]</div><div class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</div><div class="line">    at java.lang.Thread.sleep(Native Method)</div><div class="line">    at org.jboss.netty.util.HashedWheelTimer$Worker.waitForNextTick(HashedWheelTimer.java:<span class="number">459</span>)</div><div class="line">    at org.jboss.netty.util.HashedWheelTimer$Worker.run(HashedWheelTimer.java:<span class="number">376</span>)</div><div class="line">    at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:<span class="number">108</span>)</div><div class="line">    at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure>

<p>正是这个非daemon线程，导致tomcat的主线程退出后，jvm进程没能退出。类似的问题以前在HSF2里也存在，后来已经解决了。dubbo的这个问题可以通过kill来结束。</p>
<p>在tomcat的脚本里，先使用正常的方式(viaport)停止tomcat，在不成功之后会尝试”kill”方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># stop failed. Shutdown port disabled? Try a normal kill.</div><div class="line"><span class="keyword">if</span> [ $? != <span class="number">0</span> ]; then</div><div class="line">    <span class="keyword">if</span> [ ! -z <span class="string">"$CATALINA_PID"</span> ]; then</div><div class="line">      echo <span class="string">"The stop command failed. Attempting to signal the process to stop through OS signal."</span></div><div class="line">      kill -<span class="number">15</span> `cat <span class="string">"$CATALINA_PID"</span>` &gt;/dev/<span class="keyword">null</span> <span class="number">2</span>&gt;&<span class="number">1</span></div><div class="line">    fi</div><div class="line">fi</div></pre></td></tr></table></figure>

<p>但这里的一个问题是”$CATALINA_PID”默认并没有被记录起来，所以没有执行kill，需要运维人员主意这一点。</p>
<p>// 补充<br>发现这个问题并不是一定发生的，只在dubbo发生了某种异常的情况下会有。正常情况下tomcat关闭(viaport方式)还是可以让jvm进程退出的(估计dubbo或netty有逻辑去处理那个timer线程），但这个异常是怎么回事产生的暂没有精力去跟踪了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在apache-tomcat托管的应用里如果使用了dubbo的消费端，关闭tomcat时，会无法退出进程，应用会被关闭，connector端口也关闭了，但dubbo相关的一些线程仍存在，导致java进程并不会消失。</p>
<p>这其实是由非daemon线程引起的，jvm里]]>
    </summary>
    
      <category term="Java" scheme="http://lawrence-zxc.github.io/tags/Java/"/>
    
      <category term="技术" scheme="http://lawrence-zxc.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="日志" scheme="http://lawrence-zxc.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://lawrence-zxc.github.io/2013/11/13/hello-world/"/>
    <id>http://lawrence-zxc.github.io/2013/11/13/hello-world/</id>
    <published>2013-11-13T02:15:01.000Z</published>
    <updated>2014-10-24T09:38:04.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to Lawrence-zxc’s Blog! Thank you!</p>
<p>for Java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"Hello World!"</span>);</div></pre></td></tr></table></figure>



<p>for Shell</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"Hello World!"</span></div></pre></td></tr></table></figure>



<p>for JavaScript</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(<span class="string">"Hello World!"</span>);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to Lawrence-zxc’s Blog! Thank you!</p>
<p>for Java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div cla]]>
    </summary>
    
      <category term="开始" scheme="http://lawrence-zxc.github.io/tags/%E5%BC%80%E5%A7%8B/"/>
    
      <category term="Java" scheme="http://lawrence-zxc.github.io/tags/Java/"/>
    
      <category term="JavaScript" scheme="http://lawrence-zxc.github.io/tags/JavaScript/"/>
    
      <category term="日志" scheme="http://lawrence-zxc.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
